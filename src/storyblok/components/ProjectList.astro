---
import iconStampTools from '../../images/svgs/stamp-tools.svg?raw';
import iconStampExperiments from '../../images/svgs/stamp-experiments.svg?raw';
import iconStampStunts from '../../images/svgs/stamp-stunts.svg?raw';
import { Image as AstroImage } from 'astro:assets';
import ToggleButton from './ToggleButton.astro';
import Toggle from './Toggle.astro';

function getIconStamp(type) {
  switch (type) {
    case 'tools':
      return iconStampTools;
    case 'experiments':
      return iconStampExperiments;
    case 'stunts':
      return iconStampStunts;
    default:
      return '';
  }
}

function getContrastColor(hexColor) {
  // Remove the hash at the start if it's there
  hexColor = hexColor.replace(/^#/, '');

  // Parse the color to RGB
  const r = parseInt(hexColor.substring(0, 2), 16);
  const g = parseInt(hexColor.substring(2, 4), 16);
  const b = parseInt(hexColor.substring(4, 6), 16);

  // Calculate the perceptive luminance (aka luma) - human eye favors green color
  const luma = ((0.299 * r) + (0.587 * g) + (0.114 * b)) / 255;

  // Return black for bright colors, white for dark colors
  return luma > 0.5 ? '#000' : '#FFF';
}

const { projects } = Astro.props;
---

<div
  class="px-3"
  x-data="{
    showMore: $persist(false),
    filters: $persist({
      tools: true,
      experiments: true,
      stunts: true
    }),
    projects: JSON.parse(JSON.stringify(projects)),
    isVisible(index, type) {
      return (index < 12 || this.showMore) && this.filters[type];
    },
    updateFilters(filterType) {
      this.filters[filterType] = !this.filters[filterType];
      if (!this.filters[filterType]) {
        this.showMore = true;
      }
      if (!this.filters.tools && !this.filters.experiments && !this.filters.stunts) {
        this.filters = {
          tools: true,
          experiments: true,
          stunts: true
        };
      }
    }
  }"
  x-init="$watch('filters', value => {
    if (!value.tools || !value.experiments || !value.stunts) {
      this.showMore = true;
    }
    if (!value.tools && !value.experiments && !value.stunts) {
      filters = {
        tools: true,
        experiments: true,
        stunts: true
      };
    }
  })"
>
  <div class="mt-10 hidden flex-col items-center justify-center text-sm uppercase font-functionpro sm:flex lg:flex-row">
    <div class="flex items-center gap-2 lg:mr-7">
      <span class="text-brick-light">Filter:</span>
      <Toggle label="Tools" type="tools" />
      <Toggle label="Experiments" type="experiments" />
      <Toggle label="Stunts" type="stunts" />
    </div>

    <div class="flex gap-5 items-center mt-5 lg:mt-0 lg:pl-7 lg:border-l lg:border-[#f3e6cf]">
      <span class="text-brick-light">Show:</span>

      <ToggleButton
        label="Top 12"
        name="showAmount"
        value="top12"
        isActive="!showMore"
        onClick="showMore = false"
      />
      <ToggleButton
        label="All"
        name="showAmount"
        value="all"
        isActive="showMore"
        onClick="showMore = true"
      />
    </div>
  </div>

  <div class="mx-auto mt-5 max-w-7xl rounded-xl p-8 bg-brick">
    <ul class="grid grid-cols-1 gap-5 xs:grid-cols-2 md:grid-cols-3 xl:grid-cols-4">
      {projects.map((project, index) => {
        const { content } = project;
        const backgroundColor = content.backgroundColor?.color || '#000';
        const textColor = getContrastColor(backgroundColor);
        const stampColor = content.linkColor?.color || '#FFF';

        return (
          <li
            class="relative block overflow-hidden rounded pb-20 text-center project-item"
            data-type={content.type}
            style={`
              --projectBackgroundColor: ${backgroundColor};
              --projectTextColor: ${textColor};
              --projectStampColor: ${stampColor};
            `}
            x-show={`isVisible(${index}, '${content.type}')`}
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-75"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-300"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-75"
          >
            {content.icon && (
              content.icon.filename.endsWith('.svg') ? (
                <img
                  src={content.icon.filename}
                  alt=""
                  class="h-auto w-full"
                />
              ) : (
                <AstroImage
                  src={content.icon.filename}
                  alt=""
                  class="h-auto w-full"
                  inferSize={true}
                />
              )
            )}

            <div class="-mt-11 px-3">
              <p class="mb-2 text-xl uppercase leading-5 font-functionpro">
                <a class="project-item-link" href={`/${project.slug}`}>{project.name}</a>
              </p>
              {content.tagline && <p class="text-xs leading-5">{content.tagline}</p>}
            </div>

            <span class="pointer-events-none absolute -bottom-14 left-1/2 block transition-transform duration-300 ease-linear stamp-icon w-[120px] h-[120px] ml-[-60px]">
              <Fragment set:html={getIconStamp(content.type)} />
            </span>
          </li>
        );
      })}
    </ul>
  </div>

  <button
    class="mx-auto mt-11 flex items-center rounded-full px-7 text-xs uppercase transition-colors duration-300 font-functionpro text-red-dark border-red-dark border-[5px] w-[130px] h-[130px] hover:bg-red-dark hover:text-white"
    @click="showMore = true"
    x-show="!showMore">
      <span class="inline-block">View More Projects</span>
  </button>
</div>
