---
import iconTools from '../images/svgs/tools.svg?raw';
import iconExperiments from '../images/svgs/experiments.svg?raw';
import iconStunts from '../images/svgs/stunts.svg?raw';
import iconProcess from '../images/svgs/process.svg?raw';
import iconFaq from '../images/svgs/faq.svg?raw';
import iconContact from '../images/svgs/contact.svg?raw';
import iconHire from '../images/svgs/hire.svg?raw';
import iconJoin from '../images/svgs/join.svg?raw';
import { Image as AstroImage } from 'astro:assets';
import { renderRichText } from '@storyblok/astro';
import Image from './components/Image.astro';
import ProjectList from './components/ProjectList.astro';
import ContactLink from './components/ContactLink.astro';
const { blok, projects } = Astro.props;

type ImageType = {
  filename: string;
  alt?: string;
};

function renderContent(content: any) {
  return content ? renderRichText(content) : '';
}
---

<div class="relative h-screen px-3 pt-[160px] min-h-[480px]">
  {blok.heroText && <p class="relative z-10 mx-auto max-w-7xl text-center uppercase text-white text-[36px] leading-[0.89em] font-functionpro sm:text-left md:text-[82px] lg:text-[96px]">{blok.heroText}</p>}

  {blok.featureImages && blok.featureImages.length > 0 && (
    (() => {
      const imageFilename = blok.featureImages[0].filename;
      return (
        <AstroImage
          x-data="{ shown: false }"
          x-intersect="shown = true"
          src={`${imageFilename}/m/filters:format(avif)`}
          alt={blok.featureImages[0].title || ''}
          inferSize={true}
          srcset={[320, 480, 640, 768, 1024, 1366, 1536, 1920, 2048]
            .map(size => `${imageFilename}/m/${size}x0/filters:format(avif) ${size}w`)
            .join(', ')}
          sizes={`100vw`}
          class="absolute top-0 left-0 z-0 object-cover w-full h-full transition-opacity duration-500 opacity-0"
          :class="shown ? 'opacity-100' : 'opacity-0'"
        />
      );
    })()
  )}
</div>

{blok.aboutText && (
  <section id="about" class="bg-tiled-gradient py-[120px]">
    <ul class="flex flex-wrap justify-center gap-20">
      <li class="text-center uppercase font-functionpro text-mud">
        <Fragment set:html={iconTools} />
        <span class="inline-block mt-4">Tools</span>
      </li>
      <li class="text-center uppercase font-functionpro text-mud">
        <Fragment set:html={iconExperiments} />
        <span class="inline-block mt-4">Experiments</span>
      </li>
      <li class="text-center uppercase font-functionpro text-mud">
        <Fragment set:html={iconStunts} />
        <span class="inline-block mt-4">Stunts</span>
      </li>
    </ul>

    <div class="mt-12 px-3 text-center uppercase font-functionpro text-brick text-[20px] leading-[1em] md:text-[36px]">
      <div class="max-w-4xl mx-auto space-y-12 about-text" set:html={renderContent(blok.aboutText)} />
    </div>
  </section>
)}

<section id="projects" class="py-[60px]">
  <h2 class="text-4xl text-center uppercase font-functionpro text-brick-light">Projects</h2>

  {projects && (
    <ProjectList projects={projects} />
  )}
</section>

{blok.featureImages && blok.featureImages.length > 1 && (
  <Image
    image={blok.featureImages[blok.featureImages.length - 1]}
    widths={[320, 480, 640, 768, 1024, 1366, 1536, 1920, 2048]}
    sizes={`100vw`}
    className="w-full"
    wrapperClass="w-full relative"
    captionClass="absolute bottom-10 left-10 right-10 text-white text-xs uppercase font-functionpro"
  />
)}

{blok.processText && (
  <section id="process" class="bg-tiled-gradient py-[120px]">
    <h2 class="flex flex-col items-center gap-4 uppercase font-functionpro text-mud">
      <Fragment set:html={iconProcess} />
      Process
    </h2>

    <div class="mt-12 px-3 text-center uppercase font-functionpro text-brick text-[32px] leading-[1em] sm:text-[48px]">
      <div class="max-w-3xl mx-auto process-text" set:html={renderContent(blok.processText)} />
    </div>
  </section>
)}

<div class="grid grid-cols-1 lg:grid-cols-2"
  x-data="{
    currentIndex: 0,
    isHovering: false,
    intervalId: null,
    prefersReducedMotion: false,
    isLargeScreen: window.matchMedia('(min-width: 1000px)').matches,

    rotate() {
      if (this.isLargeScreen && !this.isHovering && !this.prefersReducedMotion) {
        this.currentIndex = (this.currentIndex + 1) % 4;
      }
    },

    startRotation() {
      if (this.isLargeScreen && !this.prefersReducedMotion) {
        this.intervalId = setInterval(() => this.rotate(), 5000);
      }
    },

    stopRotation() {
      clearInterval(this.intervalId);
    },

    checkReducedMotion() {
      this.prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    },

    setupMediaQueries() {
      const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
      const largeScreenQuery = window.matchMedia('(min-width: 1000px)');

      reducedMotionQuery.addEventListener('change', (e) => {
        this.prefersReducedMotion = e.matches;
        if (this.prefersReducedMotion) {
          this.stopRotation();
        } else if (this.isLargeScreen) {
          this.startRotation();
        }
      });

      largeScreenQuery.addEventListener('change', (e) => {
        this.isLargeScreen = e.matches;
        if (this.isLargeScreen && !this.prefersReducedMotion) {
          this.startRotation();
        } else {
          this.stopRotation();
        }
      });
    }
  }"
  x-init="
    checkReducedMotion();
    setupMediaQueries();
    if (!prefersReducedMotion && isLargeScreen) {
      startRotation();
    }
  "
>
  {blok.culturePhotos && (
    <div class="relative grid grid-cols-2 col-span-1 lg:grid-cols-1"
      @mouseenter="isHovering = true; stopRotation()"
      @mouseleave="isHovering = false; !prefersReducedMotion && isLargeScreen && startRotation()"
    >
      {blok.culturePhotos.slice(0, 4).map((image: { filename: string; title?: string }, index: number) => (
        <div
          class="relative lg:absolute lg:inset-0"
          x-show={`!isLargeScreen || currentIndex === ${index}`}
          x-transition:enter="transition ease-in-out duration-700"
          x-transition:enter-start="opacity-0"
          x-transition:enter-end="opacity-100"
          x-transition:leave="transition ease-in-out duration-700"
          x-transition:leave-start="opacity-100"
          x-transition:leave-end="opacity-0"
        >
          <Image
            image={image}
            wrapperClass="caption-peek relative overflow-hidden"
            className="w-full"
            widths={[320, 480, 640, 768, 1024, 1366, 1536, 1920]}
            sizes={`50vw`}
            captionClass="absolute p-5 bg-gray-darker bottom-0 left-0 right-0 text-white text-xs uppercase font-functionpro transition-transform duration-200 ease-in-out"
          />
        </div>
      ))}
    </div>
  )}

  {blok.processPhotos && (
    <div class="grid grid-cols-2 col-span-1">
      {blok.processPhotos.slice(0, 4).map((image: ImageType) => (
        <Image
          image={image}
          widths={[320, 480, 640, 768, 1024, 1366]}
          sizes={`(min-width: 1000px) 25vw, 50vw`}
          wrapperClass="caption-peek overflow-hidden relative col-span-1 row-span-1"
          className="w-full"
          captionClass="absolute p-5 bg-gray-darker bottom-0 left-0 right-0 text-white text-xs uppercase font-functionpro transition-transform duration-200 ease-in-out"
        />
      ))}
    </div>
  )}
</div>

<section class="grid grid-cols-6">
  {blok.generalPhotos && blok.generalPhotos.slice(0, 6).map((image) => (
    <Image
      image={image}
      widths={[320, 480, 640, 768, 1024, 1366]}
      sizes={`(min-width: 1000px) calc(100vw / 6), 50vw`}
      wrapperClass="col-span-3 lg:col-span-1"
      captionClass="hidden"
    />
  ))}
</section>

<section id="faq" class="py-[60px]">
  <h2 class="flex flex-col items-center gap-4 font-functionpro text-mud">
    <Fragment set:html={iconFaq} />
    <abbr class="no-underline" title="Frequently Asked Questions">FAQ</abbr>
  </h2>

  <ul class="mx-auto max-w-7xl mt-[50px]">
    {blok.faq && blok.faq.map((item: { question: string; answer: string }, index: number) => (
      <li
        x-data={`{ expanded: ${index === 0} }`}
        x-id="['faq-question', 'faq-answer']"
        class="px-3 mb-11"
      >
        {item.question && (
          <h3 class="relative pl-10">
            <span
              class="absolute top-0 left-0 block w-6 h-6 transition-colors duration-300 rounded-full"
              :class="expanded ? 'bg-red' : 'bg-green'"
            >
              <i class="absolute top-1/2 left-1/2 block w-3 -translate-x-1/2 -translate-y-1/2 bg-white h-[2px]"></i>
              <i class="absolute top-1/2 left-1/2 block w-3 -translate-x-1/2 -translate-y-1/2 bg-white transition-transform duration-300 h-[2px]" :class="expanded ? 'rotate-0' : '-rotate-90'"></i>
            </span>

            <button
              @click="expanded = !expanded"
              :aria-expanded="expanded"
              :aria-controls="$id('faq-answer')"
              :id="$id('faq-question')"
              class="text-base leading-6 uppercase font-functionpro text-green"
            >
              {item.question}
            </button>
          </h3>
        )}
        {item.answer && (
          <div
            :id="$id('faq-answer')"
            :aria-labelledby="$id('faq-question')"
            set:html={renderContent(item.answer)}
            x-show="expanded"
            x-collapse
            class="px-10 leading-7 faq-text"
          />
        )}
      </li>
    ))}
  </ul>
</section>

<section id="contact" class="bg-tiled md:flex">
  <h2 class="sr-only">Contact</h2>

  {blok.contactUs && (
    <ContactLink
      href="https://www.viget.com/contact/"
      icon={iconContact}
      title="Contact Us"
      content={blok.contactUs}
      topPosition="64px"
    />
  )}

  {blok.hireViget && (
    <ContactLink
      href="https://www.viget.com/contact/"
      icon={iconHire}
      title="Hire Viget"
      content={blok.hireViget}
      topPosition="89px"
    />
  )}

  {blok.joinViget && (
    <ContactLink
      href="https://www.viget.com/careers"
      icon={iconJoin}
      title="Join Viget"
      content={blok.joinViget}
      topPosition="100px"
    />
  )}
</section>

<style>
  @media (prefers-reduced-motion: reduce) {
    [x-transition], .transition-transform, .duration-300 {
      transition: none !important;
    }
  }
</style>
