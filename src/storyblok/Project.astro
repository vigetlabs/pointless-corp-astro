---
import { renderRichText } from '@storyblok/astro';
import { Image } from 'astro:assets';
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'

const { blok, name, projects } = Astro.props;

// Declare variables to satisfy TypeScript
let currentImage: number;
let processNavButtons: NodeListOf<Element>;
let processLength: number;

function renderContent(content: any) {
  return content ? renderRichText(content) : '';
}
---

<article class="px-5 pt-20 pb-10 project">
  <h1 class="sr-only">{name}</h1>

  <!-- Project Logo -->
  {blok.logo?.filename && (
    <Image
      x-data="{ shown: false }"
      x-intersect.threshold.25="shown = true"
      src={blok.logo.filename}
      inferSize={true}
      alt=""
      class="block max-w-full mx-auto mb-5 transition-opacity duration-500 opacity-0"
      :class="shown ? 'opacity-100' : 'opacity-0'"
    />
  )}

  <!-- Project Details -->
  <div class="w-full overflow-x-auto">
    <ul class="table w-full mx-auto uppercase border-collapse md:w-auto md:text-center metatable font-functionpro">
      {blok.url && (
        <li class="table-row border md:table-cell">
          <span class="table-cell w-1/5 md:w-auto md:block border-r md:border-r-0 border-b px-3 metatable-label text-[11px] py-[2px]">Visit</span>
          <span class="table-cell w-4/5 md:w-auto md:block px-5 metatable-value py-[2px]">
            <a href={blok.url}>
              {(() => {
                const parts = blok.url.replace(/^(https?:\/\/)?(www\.)?/i, '').split('/');
                return parts[0] + (parts[1] ? '/' + parts[1] : '');
              })()}
            </a>
          </span>
        </li>
      )}
      {blok.xHandle && (
        <li class="table-row border md:table-cell">
          <span class="table-cell w-1/5 md:w-auto md:block border-r md:border-r-0 border-b px-3 metatable-label text-[11px] py-[2px]">Follow</span>
          <span class="table-cell w-4/5 md:w-auto md:block px-5 metatable-value py-[2px]">
            <a href={`https://x.com/${blok.xHandle}`} rel="noreferrer">@{blok.xHandle}</a>
          </span>
        </li>
      )}
      {blok.type && (
        <li class="table-row border md:table-cell">
          <span class="table-cell w-1/5 md:w-auto md:block border-r md:border-r-0 border-b px-3 metatable-label text-[11px] py-[2px]">Type</span>
          <span class="table-cell w-4/5 md:w-auto md:block px-5 metatable-value py-[2px]">
            {blok.type}
          </span>
        </li>
      )}
      {blok.launchDate && (
        <li class="table-row border md:table-cell">
          <span class="table-cell w-1/5 md:w-auto md:block border-r md:border-r-0 border-b px-3 metatable-label text-[11px] py-[2px]">Launched</span>
          <span class="table-cell w-4/5 md:w-auto md:block px-5 metatable-value py-[2px]">
            {new Date(blok.launchDate).toLocaleDateString('en-US', { month: '2-digit', year: 'numeric' }).replace('/', '/')}
          </span>
        </li>
      )}
      <li class="table-row border md:table-cell">
        <span class="table-cell w-1/5 md:w-auto md:block border-r md:border-r-0 border-b px-3 metatable-label text-[11px] py-[2px]">Status</span>
        <span class="table-cell w-4/5 md:w-auto md:block px-5 metatable-value py-[2px]">
          {blok.retiredDate ? 'archived' : 'active'}
        </span>
      </li>
    </ul>
  </div>

  <!-- Project Description -->
  {blok.description && <section class="mx-auto max-w-3xl text-center project-description my-[60px] text-[24px] leading-[1.6em] space-y-9" set:html={renderContent(blok.description)} />}

  <!-- Example Blocks -->
  {blok.examples && blok.examples.length > 0 && (
    <>
      <h2 class="sr-only">Examples</h2>

      {blok.examples.map((nestedBlok: any) => (
        <StoryblokComponent blok={nestedBlok} />
      ))}
    </>
  )}

  <!-- Project Process Images -->
  {blok.process && blok.process.length > 0 && (
    <section
      class="mx-auto my-10 max-w-7xl"
      x-data="{
        currentImage: 0,
        processNavButtons: $root.querySelectorAll('.process-nav-button'),
        processLength: $root.querySelectorAll('.process-image').length
      }"
    >
      <h2 class="sr-only">Process</h2>

      <div class="relative" role="region" aria-label="Project Process Images">
        <ul class="relative overflow-hidden">
          {blok.process.map((image: { filename: string; alt?: string }, index: number) => (
            <li
              x-show={`currentImage === ${index}`}
              class="transition-opacity duration-300 ease-in-out process-image"
              x-transition:enter="opacity-0 absolute top-0 left-0 w-full h-auto"
              x-transition:enter-start="opacity-0 absolute top-0 left-0 w-full h-auto"
              x-transition:enter-end="opacity-100"
              x-transition:leave="opacity-100"
              x-transition:leave-start="opacity-100"
              x-transition:leave-end="opacity-0 absolute top-0 left-0 w-full h-auto"
              role="tabpanel"
              :aria-hidden={`currentImage !== ${index}` as any}
            >
              <Image
                src={`${image.filename}/m/filters:format(avif)`}
                alt={image.alt || 'Process image'}
                class="h-auto w-full object-cover aspect-[3/2]"
                srcset={[320, 480, 640, 768, 1024, 1366, 1536, 1920, 2048]
                  .map(size => `${image.filename}/m/${size}x0/filters:format(avif) ${size}w`)
                  .join(', ')}
                sizes={`100vw`}
                inferSize={true}
              />
            </li>
          ))}
        </ul>

        {blok.process.length > 1 && (
          <div class="absolute bottom-5 left-1/2 mt-4 flex -translate-x-1/2 justify-center rounded-full slide-nav px-[2px]" role="tablist" aria-label="Image navigation">
            {blok.process.map((_: any, index: number) => (
              <button
                class="relative process-nav-button w-[26px] h-[26px]"
                @click={`() => currentImage = ${index}`}
                :aria-selected={`currentImage === ${index} ? 'true' : 'false'`}
                role="tab"
                aria-controls={`image-${index}`}
                :tabindex={`currentImage === ${index} ? 0 : -1`}
                @keydown={(event: KeyboardEvent) => {
                  if (event.key === 'ArrowRight') {
                    currentImage = (currentImage + 1) % processLength;
                  } else if (event.key === 'ArrowLeft') {
                    currentImage = (currentImage - 1 + processLength) % processLength;
                  }

                  (processNavButtons[currentImage] as HTMLElement).focus();
                }}
              >
                <span class="sr-only">Slide {index + 1}</span>
                <span
                  class="absolute block transition-all duration-300 ease-in-out -translate-x-1/2 -translate-y-1/2 border rounded-full top-1/2 left-1/2"
                  :class={`currentImage === ${index} ? 'selected w-3 h-3' : ' w-2 h-2'`}
                ></span>
              </button>
            ))}
          </div>
        )}
      </div>
    </section>
  )}

  <!-- Related Content -->
  {blok.relatedContent && blok.relatedContent.length > 0 && (
    <section class="mx-auto mb-10 mt-14 max-w-7xl">
      <h2 class="mb-3 text-4xl text-center uppercase font-functionpro">More about {name}</h2>

      <ul class="text-center uppercase font-functionpro">
        {blok.relatedContent.map((related) => (
          <li class="py-4 text-lg leading-4">
            {(() => {
              const content = (
                <>
                  {related.title && <span class="underline group-hover:no-underline">{related.title}</span>}
                  {related.sourceName && <><br><span class="text-xs text-white">via {related.sourceName}</span></>}
                </>
              );
              return related.url ? <a href={related.url} class="group !no-underline">{content}</a> : content;
            })()}
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- More Projects -->
  <section class="mx-auto mt-14 max-w-7xl">
    <h2 class="mb-3 text-4xl text-center uppercase font-functionpro">More Pointless Projects</h2>

    <ul class="text-lg text-center uppercase font-functionpro xs:columns-2 md:columns-3">
      {projects.map((project: { slug: string; name: string }) => (
        <li class="py-2">
          <a
            href={`/${project.slug}`}
            class="hover:!no-underline"
            data-astro-prefetch
          >
            {project.name}
          </a>
        </li>
      ))}
    </ul>
  </section>
</article>
